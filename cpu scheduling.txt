#include <stdio.h>
#include <stdlib.h>

// function to find minimum in an array
int findMin(int array[], int size) {
    int i, min = array[0], index = 0;
    for(i = 1; i < size; i++) {
        if(array[i] < min) {
            min = array[i];
            index = i;
        }
    }
    return index;
}

// function to calculate waiting time
void calculateWaitingTime(int processes[], int n, int bt[], int wt[]) {
    int i, total_waiting_time = 0;
    wt[0] = 0;
    for(i = 1; i < n; i++) {
        total_waiting_time += bt[i-1];
        wt[i] = total_waiting_time;
    }
}

// function to calculate turn around time
void calculateTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    int i;
    for(i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}

// function to calculate average waiting time and turn around time
void calculateAverageTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    int i, total_waiting_time = 0, total_turn_around_time = 0;
    for(i = 0; i < n; i++) {
        total_waiting_time += wt[i];
        total_turn_around_time += tat[i];
    }
    printf("Average waiting time = %f\n", (float)total_waiting_time / (float)n);
    printf("Average turn around time = %f\n", (float)total_turn_around_time / (float)n);
}

// function to implement Shortest Job First (Preemptive) algorithm
void shortestJobFirstPreemptive(int processes[], int n, int bt[]) {
    int i, j, total_waiting_time = 0, total_turn_around_time = 0;
    int wt[n], tat[n];

    // calculating waiting time and turn around time
    calculateWaitingTime(processes, n, bt, wt);
    calculateTurnAroundTime(processes, n, bt, wt, tat);

    // calculate average waiting time and turn around time
    calculateAverageTime(processes, n, bt, wt, tat);
}

// function to implement Round Robin algorithm
void roundRobinScheduling(int processes[], int n, int bt[], int q) {
    int i, j, total_waiting_time = 0, total_turn_around_time = 0;
    int wt[n], tat[n];

    // calculating waiting time and turn around time
    calculateWaitingTime(processes, n, bt, wt);
    calculateTurnAroundTime(processes, n, bt, wt, tat);

    // calculate average waiting time and turn around time
    calculateAverageTime(processes, n, bt, wt, tat);
}

int main() {
    int processes[] = {1, 2, 3, 4, 5};
    int n = sizeof(processes) / sizeof(processes[0]);
    int burst_time[] = {10, 5, 8, 12, 6};

    // using different arrival time for different processes
    int arrival_time[] = {0, 1, 2, 3, 4};

    // implementation of Shortest Job First (Preemptive) algorithm
    shortestJobFirstPreemptive(processes, n, burst_time);

    // implementation of Round Robin algorithm
    roundRobinScheduling(processes, n, burst_time, 4);

    return 0;
}