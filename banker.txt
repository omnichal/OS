#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NRESOURCES 5
#define NPROCESSES 4

int resources[NRESOURCES] = {5, 3, 1, 3, 2};
int available[NRESOURCES];
int max[NPROCESSES][NRESOURCES];
int allocation[NPROCESSES][NRESOURCES];
int need[NPROCESSES][NRESOURCES];

pthread_mutex_t lock;

void* request(void* arg) {
    int i = *((int*)arg);
    printf("Process %d requests resources\n", i);

    for(int j = 0; j < NRESOURCES; j++) {
        if(allocation[i][j] + need[i][j] > available[j]) {
            printf("Request denied. Not enough resources.\n");
            return NULL;
        }
    }

    pthread_mutex_lock(&lock);
    for(int j = 0; j < NRESOURCES; j++) {
        available[j] += allocation[i][j];
        allocation[i][j] = 0;
    }
    pthread_mutex_unlock(&lock);

    printf("Request granted. Available resources: ");
    for(int j = 0; j < NRESOURCES; j++) {
        printf("%d ", available[j]);
    }
    printf("\n");

    return NULL;
}

void* release(void* arg) {
    int i = *((int*)arg);
    printf("Process %d releases resources\n", i);

    pthread_mutex_lock(&lock);
    for(int j = 0; j < NRESOURCES; j++) {
        available[j] += allocation[i][j];
        allocation[i][j] = 0;
    }
    pthread_mutex_unlock(&lock);

    printf("Resources released. Available resources: ");
    for(int j = 0; j < NRESOURCES; j++) {
        printf("%d ", available[j]);
    }
    printf("\n");

    return NULL;
}

int main() {
    pthread_t tid[NPROCESSES];
    pthread_mutex_init(&lock, NULL);

    for(int i = 0; i < NRESOURCES; i++) {
        available[i] = resources[i];
    }

    printf("Available resources: ");
    for(int i = 0; i < NRESOURCES; i++) {
        printf("%d ", available[i]);
    }
    printf("\n");

    int j = 0;
    for(int i = 0; i < NPROCESSES; i++) {
        for(int k = 0; k < NRESOURCES; k++) {
            allocation[i][k] = j;
            need[i][k] = j + 1;
            j++;
        }
    }

    for(int i = 0; i < NPROCESSES; i++) {
        pthread_create(&tid[i], NULL, request, (void*)&i);
    }

    for(int i = 0; i < NPROCESSES; i++) {
        pthread_join(tid[i], NULL);
    }

    for(int i = 0; i < NPROCESSES; i++) {
        pthread_create(&tid[i], NULL, release, (void*)&i);
    }

    for(int i = 0; i < NPROCESSES; i++) {
        pthread_join(tid[i], NULL);
    }

    pthread_mutex_destroy(&lock);

    return 0;
}