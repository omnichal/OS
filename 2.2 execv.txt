#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

void sort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void reverse_array(int arr[], int n) {
    int i, j;
    for (i = 0, j = n - 1; i < j; i++, j--) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

int main(int argc, char *argv[]) {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);
    pid_t pid;
    int i;

    if (argc == 1) { // Parent process
        printf("Parent process id: %d\n", getpid());
        char *new_argv[] = {"sort", NULL};
        pid = fork();

        if (pid == 0) { // Child process
            printf("Child process created. Child process id: %d\n", getpid());
            for (i = 0; i < n; i++) {
                new_argv[i + 1] = (char *) malloc(10 * sizeof(char));
                sprintf(new_argv[i + 1], "%d", arr[i]);
            }
            new_argv[n + 1] = NULL;
            execv("./sort", new_argv);
        } else if (pid > 0) { // Parent process
            int status;
            printf("Waiting for child process to finish sorting...\n");
            waitpid(pid, &status, 0);
            printf("Parent process has detected that child process has finished sorting.\n");
        } else { // Error in fork system call
            printf("Fork failed. Exiting...\n");
            exit(1);
        }
    } else { // Child process
        for (i = 0; i < n; i++) {
            arr[i] = atoi(argv[i + 1]);
        }
        printf("Child process id: %d\n", getpid());
        sort(arr, n);
        reverse_array(arr, n);
        printf("Child process has finished sorting.\n");
        printf("After sorting: \n");
        for (i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");
    }

    return 0;
}